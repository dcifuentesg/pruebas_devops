name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job para testing del Backend
  backend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: mascotas_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env
        echo "PORT=5000" >> .env
        echo "MONGO_URI=mongodb://admin:password123@localhost:27017/mascotas_test?authSource=admin" >> .env
        echo "JWT_SECRET=test_jwt_secret_key" >> .env
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Job para testing del Frontend
  frontend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: ./frontend/dist
        retention-days: 7

  # Job para Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: mascotas-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: mascotas-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        # Crear archivo .env temporal para testing
        echo "NODE_ENV=production" > ./backend/.env
        echo "PORT=5000" >> ./backend/.env
        echo "MONGO_URI=mongodb+srv://admin:admin123@cluster0.dej2xm9.mongodb.net/mascotasBogota?retryWrites=true&w=majority&appName=Cluster0" >> ./backend/.env
        echo "JWT_SECRET=test_jwt_secret_key" >> ./backend/.env
        
        # Verificar que Docker Compose está disponible
        docker --version
        docker compose version
        
        # Construir y ejecutar en modo detached
        docker compose up --build -d
        
        # Esperar a que los servicios estén listos
        sleep 45
        
        # Verificar que los contenedores estén corriendo
        docker compose ps
        docker ps
        
        # Ver logs para debugging
        docker compose logs backend
        docker compose logs frontend
        
        # Hacer health check básico con retry
        echo "Testing backend health..."
        for i in {1..10}; do
          if curl -f http://localhost:5000/api; then
            echo "Backend is healthy"
            break
          else
            echo "Backend not ready, attempt $i/10"
            sleep 5
          fi
        done
        
        echo "Testing frontend health..."
        for i in {1..10}; do
          if curl -f http://localhost; then
            echo "Frontend is healthy"
            break
          else
            echo "Frontend not ready, attempt $i/10"
            sleep 5
          fi
        done
        
        # Limpiar
        docker compose down
        
  # Job para Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Scan backend dependencies
      run: |
        cd backend
        npm audit --audit-level high
    
    - name: Scan frontend dependencies
      run: |
        cd frontend
        npm audit --audit-level high
